div.text-bg-light {
    background-color: #EBECF0 !important;
}
.logo {
    display: none;
}

.text-bg-light {
    .light-brand-logo {
        display: block !important;
    }
    .border-box {
        background: #EBECF0;
        border-radius: 20px;
        box-shadow: 7px 7px 15px rgba(55, 84, 170, .15), -7px -7px 20px rgba(255, 255, 255, 1), 0px 0px 4px rgba(255, 255, 255, .2) !important;
    }
    p, h1, h2, h3, h4, h5, h6, label, b {
        color: #909CB0;
    }
    p, label, b {
        color: #666d78;
    }
    button, .btn {
        color: #909cb0;
        box-shadow: 3px 3px 5px rgba(0,0,0,0.15), -3px -3px 5px rgba(255,255,255,0.65);
    }
    button:hover, .btn:hover {
        box-shadow: inset 3px 3px 7px rgba(136, 165, 191, 0.48), inset -3px -3px 7px #FFFFFF;
    }
}

.text-bg-dark {
    .dark-brand-logo {
        display: block !important;
    }
    .border-box {
        border-radius: 20px;
        box-shadow: 3px 3px 3px #202125, -3px -3px 3px #3e3e3e;
    }
    p, h1, h2, h3, h4, h5, h6, label, b {
        color: #d0d0d0;
    }
    button, .btn {
        box-shadow: -3px -3px 6px 0 rgb(255 255 255 / 10%), 6px 6px 16px 0 rgb(17 17 17 / 53%);
        color: #a7a7a7;
        outline: none;
    }
    button:hover, .btn:hover {
        box-shadow: inset 3px 3px 7px rgba(136, 165, 191, 0.1), inset -3px -3px 7px rgba(136, 165, 191, 0.1);
    }
}

// Utility generator
// Used to generate utilities & print utilities
@mixin generate-utility($utility, $infix, $is-rfs-media-query: false) {
    $values: map-get($utility, values);

    // If the values are a list or string, convert it into a map
    @if type-of($values)=="string" or type-of(nth($values, 1)) !="list" {
        $values: zip($values, $values);
    }

    @each $key,
    $value in $values {
        $properties: map-get($utility, property);

        // Multiple properties are possible, for example with vertical or horizontal margins or paddings
        @if type-of($properties)=="string" {
            $properties: append((), $properties);
        }

        // Use custom class if present
        $property-class: if(map-has-key($utility, class), map-get($utility, class), nth($properties, 1));
        $property-class: if($property-class ==null, "", $property-class);

        // Use custom CSS variable name if present, otherwise default to `class`
        $css-variable-name: if(map-has-key($utility, css-variable-name), map-get($utility, css-variable-name), map-get($utility, class));

        // State params to generate pseudo-classes
        $state: if(map-has-key($utility, state), map-get($utility, state), ());

        $infix: if($property-class =="" and str-slice($infix, 1, 1)=="-", str-slice($infix, 2), $infix);

        // Don't prefix if value key is null (e.g. with shadow class)
        $property-class-modifier: if($key, if($property-class =="" and $infix =="", "", "-") + $key, "");

        @if map-get($utility, rfs) {

            // Inside the media query
            @if $is-rfs-media-query {
                $val: rfs-value($value);

                // Do not render anything if fluid and non fluid values are the same
                $value: if($val ==rfs-fluid-value($value), null, $val);
            }

            @else {
                $value: rfs-fluid-value($value);
            }
        }

        $is-css-var: map-get($utility, css-var);
        $is-local-vars: map-get($utility, local-vars);
        $is-rtl: map-get($utility, rtl);

        @if $value !=null {
            @if $is-rtl ==false {
                /* rtl:begin:remove */
            }

            @if $is-css-var {
                .#{$property-class + $infix + $property-class-modifier} {
                    --#{$prefix}#{$css-variable-name}: #{$value};
                }

                @each $pseudo in $state {
                    .#{$property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo} {
                        --#{$prefix}#{$css-variable-name}: #{$value};
                    }
                }
            }

            @else {
                .#{$property-class + $infix + $property-class-modifier} {
                    @each $property in $properties {
                        @if $is-local-vars {

                            @each $local-var,
                            $variable in $is-local-vars {
                                --#{$prefix}#{$local-var}: #{$variable};
                            }
                        }

                        #{$property}: $value if($enable-important-utilities, !important, null);
                    }
                }

                @each $pseudo in $state {
                    .#{$property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo} {
                        @each $property in $properties {
                            @if $is-local-vars {

                                @each $local-var,
                                $variable in $is-local-vars {
                                    --#{$prefix}#{$local-var}: #{$variable};
                                }
                            }

                            #{$property}: $value if($enable-important-utilities, !important, null);
                        }
                    }
                }
            }

            @if $is-rtl ==false {
                /* rtl:end:remove */
            }
        }
    }
}