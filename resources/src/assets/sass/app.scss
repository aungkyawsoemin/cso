// Utility generator
// Used to generate utilities & print utilities
@mixin generate-utility($utility, $infix, $is-rfs-media-query: false) {
    $values: map-get($utility, values);

    // If the values are a list or string, convert it into a map
    @if type-of($values)=="string" or type-of(nth($values, 1)) !="list" {
        $values: zip($values, $values);
    }

    @each $key,
    $value in $values {
        $properties: map-get($utility, property);

        // Multiple properties are possible, for example with vertical or horizontal margins or paddings
        @if type-of($properties)=="string" {
            $properties: append((), $properties);
        }

        // Use custom class if present
        $property-class: if(map-has-key($utility, class), map-get($utility, class), nth($properties, 1));
        $property-class: if($property-class ==null, "", $property-class);

        // Use custom CSS variable name if present, otherwise default to `class`
        $css-variable-name: if(map-has-key($utility, css-variable-name), map-get($utility, css-variable-name), map-get($utility, class));

        // State params to generate pseudo-classes
        $state: if(map-has-key($utility, state), map-get($utility, state), ());

        $infix: if($property-class =="" and str-slice($infix, 1, 1)=="-", str-slice($infix, 2), $infix);

        // Don't prefix if value key is null (e.g. with shadow class)
        $property-class-modifier: if($key, if($property-class =="" and $infix =="", "", "-") + $key, "");

        @if map-get($utility, rfs) {

            // Inside the media query
            @if $is-rfs-media-query {
                $val: rfs-value($value);

                // Do not render anything if fluid and non fluid values are the same
                $value: if($val ==rfs-fluid-value($value), null, $val);
            }

            @else {
                $value: rfs-fluid-value($value);
            }
        }

        $is-css-var: map-get($utility, css-var);
        $is-local-vars: map-get($utility, local-vars);
        $is-rtl: map-get($utility, rtl);

        @if $value !=null {
            @if $is-rtl ==false {
                /* rtl:begin:remove */
            }

            @if $is-css-var {
                .#{$property-class + $infix + $property-class-modifier} {
                    --#{$prefix}#{$css-variable-name}: #{$value};
                }

                @each $pseudo in $state {
                    .#{$property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo} {
                        --#{$prefix}#{$css-variable-name}: #{$value};
                    }
                }
            }

            @else {
                .#{$property-class + $infix + $property-class-modifier} {
                    @each $property in $properties {
                        @if $is-local-vars {

                            @each $local-var,
                            $variable in $is-local-vars {
                                --#{$prefix}#{$local-var}: #{$variable};
                            }
                        }

                        #{$property}: $value if($enable-important-utilities, !important, null);
                    }
                }

                @each $pseudo in $state {
                    .#{$property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo} {
                        @each $property in $properties {
                            @if $is-local-vars {

                                @each $local-var,
                                $variable in $is-local-vars {
                                    --#{$prefix}#{$local-var}: #{$variable};
                                }
                            }

                            #{$property}: $value if($enable-important-utilities, !important, null);
                        }
                    }
                }
            }

            @if $is-rtl ==false {
                /* rtl:end:remove */
            }
        }
    }
}

$outline-width: 6px;
$shadow-width: 4px;

$button-background: #92CD41;
$sec-button-background: #76c442;
$shadow-color:  #4AA52E;

$alt-button-background: #F7D51D;
$alt-sec-button-background: #F2C409;
$alt-shadow-color:  #E59400;

$reset-button-background: #E76E55;
$reset-sec-button-background: #CE372B;
$reset-shadow-color:  #8C2022;

.eightbit-btn {
    background: $button-background;
    display: inline-block;
    position: relative;
    text-align: center;
    font-size: 16px;
    padding: 12px;
    font-family: 'Press Start 2P', cursive;
    text-decoration: none; 
    color: white;
    box-shadow: inset (-$shadow-width) (-$shadow-width) 0px 0px $shadow-color;

    &:hover,
    &:focus {
        background: $sec-button-background;
        box-shadow: inset (-$shadow-width*1.5) (-$shadow-width*1.5) 0px 0px $shadow-color;
    }

    &:active {
        box-shadow: inset $shadow-width $shadow-width 0px 0px $shadow-color;
    }

    &:before,
    &:after {
    content: '';
        position: absolute;
        width: 100%;
        height: 100%;
        box-sizing: content-box;
    }

    &:before {
        top: -$outline-width;
        left: 0;
        border-top: $outline-width black solid;
        border-bottom: $outline-width black solid;
    }

    &:after {
        left: -$outline-width;
        top: 0;
        border-left: $outline-width black solid;
        border-right: $outline-width black solid;
    }

    &--reset {
        background: $reset-button-background;
        box-shadow: inset (-$shadow-width) (-$shadow-width) 0px 0px $reset-shadow-color;

        &:hover,
        &:focus {
            background: $reset-sec-button-background;
            box-shadow: inset (-$shadow-width*1.5) (-$shadow-width*1.5) 0px 0px $reset-shadow-color;
        }

        &:active {
            box-shadow: inset $shadow-width $shadow-width 0px 0px $reset-shadow-color;
        }

    }

    &--proceed {
        background: $alt-button-background;
        box-shadow: inset (-$shadow-width) (-$shadow-width) 0px 0px $alt-shadow-color;

        &:hover,
        &:focus {
            background: $alt-sec-button-background;
            box-shadow: inset (-$shadow-width*1.5) (-$shadow-width*1.5) 0px 0px $alt-shadow-color;
        }

        &:active {
            box-shadow: inset $shadow-width $shadow-width 0px 0px $alt-shadow-color;
        }

    }
}
